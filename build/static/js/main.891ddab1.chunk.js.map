{"version":3,"sources":["Weather.js","WeatherDetail.js","App.js","reportWebVitals.js","index.js"],"names":["Weather","city_name","color","useState","data","setData","loading","setLoading","useEffect","fetch","process","then","res","json","result","finally","to","name","className","dayjs","ts","format","src","weather","icon","alt","description","Math","round","main","temp","temp_max","temp_min","humidity","WeatherDetail","props","match","params","id","coverColor","setCoverColor","weatherMain","list","pickCoverColor","map","forecast","index","dateTime","Date","dt","month","getMonth","date","getDate","hours","getHours","min","String","getMinutes","padStart","temperature","iconPath","city","App","basename","exact","path","color_name","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.891ddab1.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport dayjs from 'dayjs';\n\nfunction Weather({city_name, color}) {\n\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(()=>{\n    fetch(`${process.env.REACT_APP_OW_API_URL}/weather/?q=${city_name}&APPID=${process.env.REACT_APP_OW_API_KEY}&units=metric`)\n    .then(res => res.json())\n    .then(result => {\n      setData(result);\n      setLoading(false);\n    })\n    .finally(() => {\n      setLoading(false);\n    });\n  },[city_name])\n\n  if (loading) {\n    return <div></div>\n  }\n\n\n  return (\n    <Link to={`/detail/${data.name}`} className={`${color} mt-12 rounded-xl shadow-2xl text-white p-8 transform duration-300 hover:-translate-y-6 w-full md:w-1/2 lg:w-1/4`}>\n\n      <div className=\"w-full\">\n        <div className=\"font-bold tracking-more-wider text-sm\">\n          { dayjs(data.ts).format('YYYY-MM-DD')}\n        </div>\n\n\n        <div className=\"flex justify-between\">\n          <p className=\"text-3xl font-bold\">\n            { data.name }\n          </p>\n\n          <div>\n            <img src={`${process.env.REACT_APP_OW_ICON_URL}/${data.weather[0].icon}.png`} alt={data.weather[0].description}/>\n          </div>\n        </div>\n\n        <div className=\"pt-4\">\n          <p className=\"font-light text-xs\">Weather Condition</p>\n          <p className=\"text-lg font-medium tracking-wide\">\n            { data.weather[0].description }\n          </p>\n        </div>\n\n        <div className=\"pt-6 flex\">\n          <div className=\"mr-4\">\n            <p className=\"font-light text-xs\">Temp</p>\n            <p className=\"font-bold tracking-more-wider text-sm mt-1\">\n              {Math.round(data.main.temp)}°C\n            </p>\n          </div>\n\n          <div className=\"mr-4\">\n            <p className=\"font-light text-xs\">Max</p>\n            <p className=\"font-bold tracking-more-wider text-sm mt-1\">\n              {Math.round(data.main.temp_max)}°C\n            </p>\n          </div>\n\n          <div className=\"\">\n            <p className=\"font-light text-xs\">Min</p>\n            <p className=\"font-bold tracking-more-wider text-sm mt-1\">\n              {Math.round(data.main.temp_min)}°C\n            </p>\n          </div>\n        </div>\n\n        <div className=\"pt-6\">\n          <p className=\"font-light text-xs\">\n            Humidity\n          </p>\n          <p className=\"font-bold tracking-more-wider text-sm mt-1\">\n            {data.main.humidity}%\n          </p>\n        </div>\n\n      </div>\n\n    </Link>\n  )\n}\n\nexport default Weather\n","import { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\n\nfunction WeatherDetail(props) {\n\n  const city_name = props.match.params.id\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [coverColor, setCoverColor] = useState('');\n\n  function utcToJSTime(utcTime){\n    return utcTime * 1000;\n  }\n\n  useEffect(()=>{\n    fetch(`${process.env.REACT_APP_OW_API_URL}/forecast?q=${city_name}&APPID=${process.env.REACT_APP_OW_API_KEY}&units=metric`)\n    .then(res => res.json())\n    .then(result => {\n      setData(result)\n      pickCoverColor(result)\n      setLoading(false)\n    })\n    .finally(() => {\n      setLoading(false)\n    });\n  },[city_name])\n\n  function pickCoverColor(data){\n    // 色の設定-coverの背景\n    const weatherMain = data.list[0].weather[0].main\n    const color =\n      (weatherMain === 'Clouds') ? 'from-gray-800 to-purple-200' : // 曇り\n      (weatherMain === 'Rain') ? 'from-blue-800 to-pink-300' : // 雨\n      (weatherMain === 'Clear') ? 'from-green-400 to-blue-700' : // 晴れ\n      'from-yellow-400 to-green-500'\n    setCoverColor(color)\n  }\n\n  if (loading) {\n    return <div></div>\n  }\n\n\n  return (\n    <div className=\"bg-gray-300 pb-24\">\n      <div className=\"m-auto\">\n        {data.list.map(function(forecast, index){\n          const dateTime = new Date(utcToJSTime(forecast.dt))\n          const month = dateTime.getMonth() + 1\n          const date = dateTime.getDate()\n          const hours = dateTime.getHours()\n          const min = String(dateTime.getMinutes()).padStart(2, '0')\n          const temperature = Math.round(forecast.main.temp)\n          const description = forecast.weather[0].description\n          const iconPath = `${process.env.REACT_APP_OW_ICON_URL}/${forecast.weather[0].icon}.png`\n\n          // 現在の天気\n          if ( index === 0 ){\n            return (\n              <div key={index} className=\"\">\n                <div className={`bg-gradient-to-r ${coverColor} m-auto text-white text-center pt-24 pb-28 px-10 mb-4`}>\n                  <h1 className=\"text-3xl font-bold\">Hourly Forecast</h1>\n                  <div className=\"mt-12 text-2xl \">{data.city.name}</div>\n                  <div className=\"mt-0\">\n                    <span className=\"pr-4\">{month}/{date}</span>\n                    <span className=\"\">{hours}:{min}</span>\n                  </div>\n                  <div className=\"icon\" className=\"py-4\"><img className=\"m-auto\" src={iconPath} alt={description}  /></div>\n                  <div className=\"info\">\n                      <p>\n                          <span className=\"block text-2xl\">{description}</span>\n                          <span className=\"block text-2xl mt-2\">{temperature}°C</span>\n                      </p>\n                  </div>\n                </div>\n              </div>\n            )\n          } else {\n            return (\n              <div key={index} className=\"text-gray-900 pt-4 pb-4 px-8 flex items-center justify-between border-b border-gray-900 font-bold max-w-screen-sm m-auto\">\n                  <div className=\"info h-16 text-normal flex justify-center items-center flex-col\">\n                      <span className=\"block\">{month}/{date}</span>\n                      <span className=\"block\">{hours}:{min}</span>\n                  </div>\n                  <picture className=\"icon w-16\"><img src={iconPath} alt={description} /></picture>\n                  <div className=\"text-left w-1/4 text-lg\"><span className=\"description block\">{description}</span></div>\n                  <div className=\"w-1/4 text-right text-xl\"><span className=\"temp\">{temperature}°C</span></div>\n              </div>\n            )\n          }\n        })}\n        <div className=\"text-center px-4\">\n          <Link to=\"/\" className={`bg-gray-100 text-gray-900 shadow-2xl max-w-screen-sm mx-auto text-center p-6 mt-24 rounded-xl block text-lg font-bold duration-500 transform hover:-translate-y-6`}>\n            <span className=\"\">back</span>\n          </Link>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default WeatherDetail\n","import './App.scss';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport Weather from './Weather';\nimport WeatherDetail from './WeatherDetail';\n\nfunction App() {\n\n  const cities = [\n    {city_name: 'Tokyo', color_name: 'bg-blue-500'},\n    {city_name: 'Paris', color_name: 'bg-yellow-500'},\n    {city_name: 'Brazil', color_name: 'bg-green-500'},\n    {city_name: 'Toronto', color_name: 'bg-red-500'}\n  ];\n\n  return (\n    <div className=\"App min-h-screen\">\n      <div className=\"inner w-full m-auto\">\n        <div className=\"w-full\">\n          <BrowserRouter basename=\"/react-weather\" >\n            <Switch>\n              <Route exact path=\"/\">\n                <div className=\"max-w-screen-lg mx-auto py-24\">\n                  <h1 className=\"text-4xl font-bold text-center\">Current Weather</h1>\n                  <p className=\"mt-4 text-center\">click to check Hourly Forecast\n                    <span className=\"text-pink-500 text-lg\"> :)</span>\n                  </p>\n                  <div className=\"flex flex-wrap justify-center p-8\">\n                    {\n                      cities.map((city,index) =>\n                        <Weather\n                          key={index}\n                          city_name={city.city_name}\n                          color={city.color_name}\n                        />\n                      )\n                    }\n                  </div>\n                </div>\n              </Route>\n              <Route path=\"/detail/:id\" component={WeatherDetail} />\n              <Route path=\"/detail\" component={WeatherDetail} />\n            </Switch>\n          </BrowserRouter>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}